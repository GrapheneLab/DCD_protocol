<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>`basic_outcome&lt;T, EC, EP, NoValuePolicy&gt;` on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/reference/types/basic_outcome/</link>
    <description>Recent content in `basic_outcome&lt;T, EC, EP, NoValuePolicy&gt;` on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 01 Feb 2019 23:42:52 +0000</lastBuildDate>
    
	<atom:link href="https://ned14.github.io/outcome/reference/types/basic_outcome/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>`basic_outcome() = delete`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/default/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/default/</guid>
      <description>The default constructor for basic outcome is always disabled.</description>
    </item>
    
    <item>
      <title>`basic_outcome(basic_outcome &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/move_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/move_constructor/</guid>
      <description>Move constructor.
Requires: that value_type, error_type and exception_type all implement a move constructor.
Complexity: Same as for value_type&amp;rsquo;s, error_type&amp;rsquo;s and exception_type&amp;rsquo;s move constructors. Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the object is left in a partially completed state, as per the normal rules for the same operation on a struct.</description>
    </item>
    
    <item>
      <title>`basic_outcome(const basic_outcome &amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/copy_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/copy_constructor/</guid>
      <description>Copy constructor.
Requires: that value_type, error_type and exception_type all implement a copy constructor.
Complexity: Same as for value_type&amp;rsquo;s, error_type&amp;rsquo;s and exception_type&amp;rsquo;s copy constructors. Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the object is left in a partially completed state, as per the normal rules for the same operation on a struct.</description>
    </item>
    
    <item>
      <title>`basic_outcome &amp;operator=(basic_outcome &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/move_assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/move_assignment/</guid>
      <description>Move assignment.
Requires: that value_type, error_type and exception_type all implement move assignment.
Complexity: If the value_type for both is present, uses value_type&amp;rsquo;s move assignment operator, else either destructs or move constructs value_type as appropriate. error_type&amp;rsquo;s and exception_type&amp;rsquo;s move assignment operator are always used. Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the object is left in a partially completed state, as per the normal rules for the same operation on a struct.</description>
    </item>
    
    <item>
      <title>`basic_outcome &amp;operator=(const basic_outcome &amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/copy_assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/copy_assignment/</guid>
      <description>Copy assignment.
Requires: that value_type, error_type and exception_type all implement copy assignment.
Complexity: If the value_type for both is present, uses value_type&amp;rsquo;s copy assignment operator, else either destructs or copy constructs value_type as appropriate. error_type&amp;rsquo;s and exception_type&amp;rsquo;s copy assignment operator is always used. Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the object is left in a partially completed state, as per the normal rules for the same operation on a struct.</description>
    </item>
    
    <item>
      <title>`~basic_outcome()`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/destructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/destructor/</guid>
      <description>Destructor.
Requires: Always available.
Complexity: Same as for value_type&amp;rsquo;s, error_type&amp;rsquo;s and exception_type&amp;rsquo;s destructors. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(Args...) = delete`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/disabling_catchall/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/disabling_catchall/</guid>
      <description>Disabling catchall constructor used to give useful diagnostic error when trying to use non-inplace constructors when predicate::constructors_enabled is false.
Requires: predicate::constructors_enabled is false.
Complexity: N/A.</description>
    </item>
    
    <item>
      <title>`basic_outcome(X &amp;&amp;) = delete`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/disabling_implicit_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/disabling_implicit_constructor/</guid>
      <description>Disabling implicit constructor used to give useful diagnostic error when trying to use implicit constructors when predicate::implicit_constructors_enabled is false.
Requires: predicate::implicit_constructors_enabled is false.
Complexity: N/A.</description>
    </item>
    
    <item>
      <title>`basic_outcome(R &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_value_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_value_converting_constructor/</guid>
      <description>Implicit value_type constructor. Calls void hook_outcome_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and R.
Requires: predicate::enable_value_converting_constructor&amp;lt;R&amp;gt; is true.
Complexity: Same as for value_type&amp;rsquo;s copy or move constructor. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(S &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_error_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_error_converting_constructor/</guid>
      <description>Implicit error_type constructor. Calls void hook_outcome_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and S.
Requires: predicate::enable_error_converting_constructor&amp;lt;S&amp;gt; is true.
Complexity: Same as for error_type&amp;rsquo;s copy or move constructor. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(ErrorCondEnum &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_error_condition_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_error_condition_converting_constructor/</guid>
      <description>Implicit error_type from ErrorCondEnum constructor. Calls void hook_outcome_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and ErrorCondEnum.
Requires: predicate::enable_error_condition_converting_constructor&amp;lt;R&amp;gt; is true.
Complexity: Same as for error_type&amp;rsquo;s copy or move constructor from the result of make_error_code(ErrorCondEnum). Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the state of the input is left indeterminate.</description>
    </item>
    
    <item>
      <title>`basic_outcome(P &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_exception_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_exception_converting_constructor/</guid>
      <description>Implicit exception_type constructor. Calls void hook_outcome_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and P.
Requires: predicate::enable_exception_converting_constructor&amp;lt;P&amp;gt; is true.
Complexity: Same as for exception_type&amp;rsquo;s copy or move constructor. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(S &amp;&amp;, P &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_error_exception_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_error_exception_converting_constructor/</guid>
      <description>Implicit error_type + exception_type constructor. Calls void hook_outcome_construction(T *, U &amp;amp;&amp;amp;, V &amp;amp;&amp;amp;) noexcept with this, S and P.
Requires: predicate::enable_error_exception_converting_constructor&amp;lt;S, P&amp;gt; is true.
Complexity: Same as for error_type&amp;rsquo;s and exception_type&amp;rsquo;s copy or move constructor. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(ValueOrError&lt;T, E&gt; &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_valueorerror_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_valueorerror_converting_constructor/</guid>
      <description>Explicit converting constructor from ValueOrError&amp;lt;T, E&amp;gt; concept matching types. Delegates to the basic_result move constructor explicit basic_outcome(basic_result&amp;lt;A, B, C&amp;gt; &amp;amp;&amp;amp;).
Requires: convert::value_or_error&amp;lt;T, U&amp;gt; has an available call operator, and if the input is a basic_result or basic_outcome, then convert::value_or_error&amp;lt;&amp;gt; has enabled those inputs for that convert::value_or_error&amp;lt;&amp;gt; specialisation.
Complexity: Same as for the copy or move constructor from the input&amp;rsquo;s .value() or .error() respectively. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(const basic_outcome&lt;A, B, C, D&gt; &amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_copy_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_copy_converting_constructor/</guid>
      <description>Explicit converting copy constructor from compatible basic_outcome. Calls void hook_outcome_copy_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and the input.
Requires: predicate::enable_compatible_conversion&amp;lt;A, B, C, D&amp;gt; is true.
Complexity: Same as for the copy constructors of the underlying types. Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the object is left in a partially completed state, as per the normal rules for the same operation on a struct.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(basic_outcome&lt;A, B, C, D&gt; &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_move_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_move_converting_constructor/</guid>
      <description>Explicit converting move constructor from compatible basic_outcome. Calls void hook_outcome_move_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and the input.
Requires: predicate::enable_compatible_conversion&amp;lt;A, B, C, D&amp;gt; is true.
Complexity: Same as for the move constructors of the underlying types. Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the object is left in a partially completed state, as per the normal rules for the same operation on a struct.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(const basic_result&lt;A, B, C&gt; &amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_result_copy_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_result_copy_converting_constructor/</guid>
      <description>Explicit converting copy constructor from compatible basic_result. Calls void hook_outcome_copy_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and the input.
Requires: predicate::enable_compatible_conversion&amp;lt;A, B, void, C&amp;gt; is true.
Complexity: Same as for the copy constructors of the underlying types. Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the object is left in a partially completed state, as per the normal rules for the same operation on a struct.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(basic_result&lt;A, B, C&gt; &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_result_move_converting_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_result_move_converting_constructor/</guid>
      <description>Explicit converting move constructor from compatible basic_result. Calls void hook_outcome_move_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and the input.
Requires: predicate::enable_compatible_conversion&amp;lt;A, B, void, C&amp;gt; is true.
Complexity: Same as for the move constructors of the underlying types. Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the object is left in a partially completed state, as per the normal rules for the same operation on a struct.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(in_place_type_t&lt;value_type_if_enabled&gt;, Args ...)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_value_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_value_constructor/</guid>
      <description>Explicit inplace value constructor. Calls void hook_outcome_in_place_construction(T *, in_place_type_t&amp;lt;U&amp;gt;, Args &amp;amp;&amp;amp;...) noexcept with this, in_place_type&amp;lt;value_type&amp;gt; and Args ....
Requires: predicate::enable_inplace_value_constructor&amp;lt;Args ...&amp;gt; is true.
Complexity: Same as for the value_type constructor which accepts Args .... Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the state of the Args is left indeterminate.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(in_place_type_t&lt;value_type_if_enabled&gt;, std::initializer_list&lt;U&gt;, Args ...)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_value_constructor_il/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_value_constructor_il/</guid>
      <description>Explicit inplace value constructor. Calls void hook_outcome_in_place_construction(T *, in_place_type_t&amp;lt;U&amp;gt;, Args &amp;amp;&amp;amp;...) noexcept with this, in_place_type&amp;lt;value_type&amp;gt;, &amp;lsquo;std::initializer_list&amp;rsquo; and Args ....
Requires: predicate::enable_inplace_value_constructor&amp;lt;std::initializer_list&amp;lt;U&amp;gt;, Args ...&amp;gt; is true.
Complexity: Same as for the value_type constructor which accepts std::initializer_list&amp;lt;U&amp;gt;, Args .... Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the state of the Args is left indeterminate.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(in_place_type_t&lt;error_type_if_enabled&gt;, Args ...)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_error_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_error_constructor/</guid>
      <description>Explicit inplace error constructor. Calls void hook_outcome_in_place_construction(T *, in_place_type_t&amp;lt;U&amp;gt;, Args &amp;amp;&amp;amp;...) noexcept with this, in_place_type&amp;lt;error_type&amp;gt; and Args ....
Requires: predicate::enable_inplace_error_constructor&amp;lt;Args ...&amp;gt; is true.
Complexity: Same as for the error_type constructor which accepts Args .... Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the state of the Args is left indeterminate.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(in_place_type_t&lt;error_type_if_enabled&gt;, std::initializer_list&lt;U&gt;, Args ...)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_error_constructor_il/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_error_constructor_il/</guid>
      <description>Explicit inplace error constructor. Calls void hook_outcome_in_place_construction(T *, in_place_type_t&amp;lt;U&amp;gt;, Args &amp;amp;&amp;amp;...) noexcept with this, in_place_type&amp;lt;error_type&amp;gt;, std::initializer_list&amp;lt;U&amp;gt; and Args ....
Requires: predicate::enable_inplace_error_constructor&amp;lt;std::initializer_list&amp;lt;U&amp;gt;, Args ...&amp;gt; is true.
Complexity: Same as for the error_type constructor which accepts std::initializer_list&amp;lt;U&amp;gt;, Args .... Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the state of the Args is left indeterminate.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(in_place_type_t&lt;exception_type_if_enabled&gt;, Args ...)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_exception_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_exception_constructor/</guid>
      <description>Explicit inplace exception constructor. Calls void hook_outcome_in_place_construction(T *, in_place_type_t&amp;lt;U&amp;gt;, Args &amp;amp;&amp;amp;...) noexcept with this, in_place_type&amp;lt;exception_type&amp;gt; and Args ....
Requires: predicate::enable_inplace_exception_constructor&amp;lt;Args ...&amp;gt; is true.
Complexity: Same as for the exception_type constructor which accepts Args .... Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the state of the Args is left indeterminate.</description>
    </item>
    
    <item>
      <title>`explicit basic_outcome(in_place_type_t&lt;exception_type_if_enabled&gt;, std::initializer_list&lt;U&gt;, Args ...)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_exception_constructor_il/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/explicit_inplace_exception_constructor_il/</guid>
      <description>Explicit inplace exception constructor. Calls void hook_outcome_in_place_construction(T *, in_place_type_t&amp;lt;U&amp;gt;, Args &amp;amp;&amp;amp;...) noexcept with this, in_place_type&amp;lt;exception_type&amp;gt;, std::initializer_list&amp;lt;U&amp;gt; and Args ....
Requires: predicate::enable_inplace_exception_constructor&amp;lt;std::initializer_list&amp;lt;U&amp;gt;, Args ...&amp;gt; is true.
Complexity: Same as for the exception_type constructor which accepts std::initializer_list&amp;lt;U&amp;gt;, Args .... Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the state of the Args is left indeterminate.</description>
    </item>
    
    <item>
      <title>`basic_outcome(A1 &amp;&amp;, A2 &amp;&amp;, Args ...)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_inplace_value_error_exception_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_inplace_value_error_exception_constructor/</guid>
      <description>Implicit inplace value or error or exception constructor. Delegates to an appropriate explicit inplace constructor depending on input.
Requires: predicate::enable_inplace_value_error_exception_constructor` is true.
Complexity: Same as for the value_type or error_type or exception_type constructor which accepts A1, A2, Args .... Constexpr, triviality and noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the state of the Args is left indeterminate.</description>
    </item>
    
    <item>
      <title>`basic_outcome(const success_type&lt;T&gt; &amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_success_copy_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_success_copy_constructor/</guid>
      <description>Implicit value-from-success-type-sugar copy constructor used to disambiguate the construction of the value type. Note that if T = void, value_type will be default constructed. Calls void hook_outcome_copy_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and const success_type&amp;lt;T&amp;gt; &amp;amp;.
Requires: predicate::enable_compatible_conversion&amp;lt;T, void, void&amp;gt; is true, or T is void.
Complexity: Same as for the value_type constructor which accepts T, or the value_type default constructor if T is void. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(success_type&lt;T&gt; &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_success_move_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_success_move_constructor/</guid>
      <description>Implicit value-from-success-type-sugar move constructor used to disambiguate the construction of the value type. Note that if T = void, value_type will be default constructed. Calls void hook_outcome_move_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and success_type&amp;lt;T&amp;gt; &amp;amp;&amp;amp;.
Requires: predicate::enable_compatible_conversion&amp;lt;T, void, void&amp;gt; is true, or T is void.
Complexity: Same as for the value_type constructor which accepts T, or the value_type default constructor if T is void. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(const failure_type&lt;EC&gt; &amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_error_copy_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_error_copy_constructor/</guid>
      <description>Implicit error-from-failure-type-sugar copy constructor used to disambiguate the construction of the error type. Calls void hook_outcome_copy_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and const failure_type&amp;lt;EC&amp;gt; &amp;amp;.
Requires: predicate::enable_compatible_conversion&amp;lt;void, EC, void, void&amp;gt; is true.
Complexity: Same as for the error_type constructor which accepts EC. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(failure_type&lt;EC&gt; &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_error_move_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_error_move_constructor/</guid>
      <description>Implicit error-from-failure-type-sugar move constructor used to disambiguate the construction of the error type. Calls void hook_outcome_move_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and failure_type&amp;lt;EC&amp;gt; &amp;amp;&amp;amp;.
Requires: predicate::enable_compatible_conversion&amp;lt;void, EC, void, void&amp;gt; is true.
Complexity: Same as for the error_type constructor which accepts EC. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(const failure_type&lt;EP&gt; &amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_exception_copy_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_exception_copy_constructor/</guid>
      <description>Implicit exception-from-failure-type-sugar copy constructor used to disambiguate the construction of the exception type. Calls void hook_outcome_copy_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and const failure_type&amp;lt;EP&amp;gt; &amp;amp;.
Requires: predicate::enable_compatible_conversion&amp;lt;void, void, EP, void&amp;gt; is true.
Complexity: Same as for the exception_type constructor which accepts EP. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(failure_type&lt;EP&gt; &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_exception_move_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_exception_move_constructor/</guid>
      <description>Implicit exception-from-failure-type-sugar move constructor used to disambiguate the construction of the exception type. Calls void hook_outcome_move_construction(T *, U &amp;amp;&amp;amp;) noexcept with this and failure_type&amp;lt;EP&amp;gt; &amp;amp;&amp;amp;.
Requires: predicate::enable_compatible_conversion&amp;lt;void, void, EP, void&amp;gt; is true.
Complexity: Same as for the exception_type constructor which accepts EP. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(const failure_type&lt;EC, EP&gt; &amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_error_exception_copy_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_error_exception_copy_constructor/</guid>
      <description>Implicit error-and-exception-from-failure-type-sugar copy constructor used to disambiguate the construction of the error + exception types. Calls void hook_outcome_copy_construction(T *, U &amp;amp;&amp;amp;, V &amp;amp;&amp;amp;) noexcept with this, const failure_type&amp;lt;EC&amp;gt; &amp;amp; and const failure_type&amp;lt;EP&amp;gt; &amp;amp;.
Requires: predicate::enable_compatible_conversion&amp;lt;void, EC, EP, void&amp;gt; is true.
Complexity: Same as for the error_type and exception_type constructors which accept EC and EP. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`basic_outcome(failure_type&lt;EC, EP&gt; &amp;&amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_error_exception_move_constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/implicit_failure_error_exception_move_constructor/</guid>
      <description>Implicit error-and-exception-from-failure-type-sugar move constructor used to disambiguate the construction of the error + exception types. Calls void hook_outcome_move_construction(T *, U &amp;amp;&amp;amp;, V &amp;amp;&amp;amp;) noexcept with this, failure_type&amp;lt;EC&amp;gt; &amp;amp;&amp;amp; and failure_type&amp;lt;EP&amp;gt; &amp;amp;&amp;amp;.
Requires: predicate::enable_compatible_conversion&amp;lt;void, EC, EP, void&amp;gt; is true.
Complexity: Same as for the error_type and exception_type constructors which accept EC and EP. Constexpr, triviality and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`explicit operator bool() const noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/operator_bool/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/operator_bool/</guid>
      <description>Returns true if a value is present. Constexpr where possible. Alias for bool has_value() const noexcept.
Requires: Always available.
Complexity: Constant time.
Guarantees: Never throws an exception.</description>
    </item>
    
    <item>
      <title>`bool has_value() const noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/has_value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/has_value/</guid>
      <description>Returns true if a value is present. Constexpr where possible. Alias for explicit operator bool() const noexcept.
Requires: Always available.
Complexity: Constant time.
Guarantees: Never throws an exception.</description>
    </item>
    
    <item>
      <title>`bool has_error() const noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/has_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/has_error/</guid>
      <description>Returns true if an error is present. Constexpr where possible.
Requires: Always available.
Complexity: Constant time.
Guarantees: Never throws an exception.</description>
    </item>
    
    <item>
      <title>`bool has_exception() const noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/has_exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/has_exception/</guid>
      <description>Returns true if an exception is present. Constexpr where possible.
Requires: Always available.
Complexity: Constant time.
Guarantees: Never throws an exception.</description>
    </item>
    
    <item>
      <title>`bool has_failure() const noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/has_failure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/has_failure/</guid>
      <description>Returns true if there is either an error or an exception. Constexpr where possible.
Requires: Always available.
Complexity: Constant time.
Guarantees: Never throws an exception.</description>
    </item>
    
    <item>
      <title>`value_type &amp;assume_value() &amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_value_lvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_value_lvalue/</guid>
      <description>Narrow contract lvalue reference observer of any value present. NoValuePolicy::narrow_value_check() is first invoked, then the reference to the value is returned. The convention is that hard undefined behaviour occurs if no value is actually present, however NoValuePolicy::narrow_value_check() can do something to avoid that.
Note that if value_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_value_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`const value_type &amp;assume_value() const &amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_value_lvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_value_lvalue_const/</guid>
      <description>Narrow contract const lvalue reference observer of any value present. NoValuePolicy::narrow_value_check() is first invoked, then the reference to the value is returned. The convention is that hard undefined behaviour occurs if no value is actually present, however NoValuePolicy::narrow_value_check() can do something to avoid that.
Note that if value_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_value_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`value_type &amp;&amp;assume_value() &amp;&amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_value_rvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_value_rvalue/</guid>
      <description>Narrow contract rvalue reference observer of any value present. NoValuePolicy::narrow_value_check() is first invoked, then the reference to the value is returned. The convention is that hard undefined behaviour occurs if no value is actually present, however NoValuePolicy::narrow_value_check() can do something to avoid that.
Note that if value_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_value_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`const value_type &amp;&amp;assume_value() const &amp;&amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_value_rvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_value_rvalue_const/</guid>
      <description>Narrow contract const rvalue reference observer of any value present. NoValuePolicy::narrow_value_check() is first invoked, then the reference to the value is returned. The convention is that hard undefined behaviour occurs if no value is actually present, however NoValuePolicy::narrow_value_check() can do something to avoid that.
Note that if value_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_value_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`value_type &amp;value() &amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/value_lvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/value_lvalue/</guid>
      <description>Wide contract lvalue reference observer of any value present. NoValuePolicy::wide_value_check() is first invoked, then the reference to the value is returned.
Note that if value_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_value_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`const value_type &amp;value() const &amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/value_lvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/value_lvalue_const/</guid>
      <description>Wide contract const lvalue reference observer of any value present. NoValuePolicy::wide_value_check() is first invoked, then the reference to the value is returned.
Note that if value_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_value_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`value_type &amp;&amp;value() &amp;&amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/value_rvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/value_rvalue/</guid>
      <description>Wide contract rvalue reference observer of any value present. NoValuePolicy::wide_value_check() is first invoked, then the reference to the value is returned.
Note that if value_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_value_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`const value_type &amp;&amp;value() const &amp;&amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/value_rvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/value_rvalue_const/</guid>
      <description>Wide contract const rvalue reference observer of any value present. NoValuePolicy::wide_value_check() is first invoked, then the reference to the value is returned.
Note that if value_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_value_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`error_type &amp;assume_error() &amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_error_lvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_error_lvalue/</guid>
      <description>Narrow contract lvalue reference observer of the stored error. NoValuePolicy::narrow_error_check() is first invoked, then the reference to the error is returned. As a valid default constructed error is always present, no undefined behaviour occurs unless NoValuePolicy::narrow_error_check() does that.
Note that if error_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_error_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`const error_type &amp;assume_error() const &amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_error_lvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_error_lvalue_const/</guid>
      <description>Narrow contract const lvalue reference observer of the stored error. NoValuePolicy::narrow_error_check() is first invoked, then the reference to the error is returned. As a valid default constructed error is always present, no undefined behaviour occurs unless NoValuePolicy::narrow_error_check() does that.
Note that if error_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_error_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`error_type &amp;&amp;assume_error() &amp;&amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_error_rvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_error_rvalue/</guid>
      <description>Narrow contract rvalue reference observer of the stored error. NoValuePolicy::narrow_error_check() is first invoked, then the reference to the error is returned. As a valid default constructed error is always present, no undefined behaviour occurs unless NoValuePolicy::narrow_error_check() does that.
Note that if error_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_error_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`const error_type &amp;&amp;assume_error() const &amp;&amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_error_rvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_error_rvalue_const/</guid>
      <description>Narrow contract const rvalue reference observer of the stored error. NoValuePolicy::narrow_error_check() is first invoked, then the reference to the error is returned. As a valid default constructed error is always present, no undefined behaviour occurs unless NoValuePolicy::narrow_error_check() does that.
Note that if error_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_error_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`error_type &amp;error() &amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/error_lvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/error_lvalue/</guid>
      <description>Wide contract lvalue reference observer of the stored error. NoValuePolicy::wide_error_check() is first invoked, then the reference to the error is returned. As a valid default constructed error is always present, no undefined behaviour occurs if NoValuePolicy::wide_error_check() returns.
Note that if error_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_error_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`const error_type &amp;error() const &amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/error_lvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/error_lvalue_const/</guid>
      <description>Wide contract const lvalue reference observer of the stored error. NoValuePolicy::wide_error_check() is first invoked, then the reference to the error is returned. As a valid default constructed error is always present, no undefined behaviour occurs if NoValuePolicy::wide_error_check() returns.
Note that if error_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_error_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`error_type &amp;&amp;error() &amp;&amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/error_rvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/error_rvalue/</guid>
      <description>Wide contract rvalue reference observer of the stored error. NoValuePolicy::wide_error_check() is first invoked, then the reference to the error is returned. As a valid default constructed error is always present, no undefined behaviour occurs if NoValuePolicy::wide_error_check() returns.
Note that if error_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_error_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`const error_type &amp;&amp;error() const &amp;&amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/error_rvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/error_rvalue_const/</guid>
      <description>Wide contract const rvalue reference observer of the stored error. NoValuePolicy::wide_error_check() is first invoked, then the reference to the error is returned. As a valid default constructed error is always present, no undefined behaviour occurs if NoValuePolicy::wide_error_check() returns.
Note that if error_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_error_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`exception_type &amp;assume_exception() &amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_exception_lvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_exception_lvalue/</guid>
      <description>Narrow contract lvalue reference observer of the stored exception. NoValuePolicy::narrow_exception_check() is first invoked, then the reference to the exception is returned. As a valid default constructed exception is always present, no undefined behaviour occurs unless NoValuePolicy::narrow_exception_check() does that.
Note that if exception_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_exception_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`const exception_type &amp;assume_exception() const &amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_exception_lvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_exception_lvalue_const/</guid>
      <description>Narrow contract const lvalue reference observer of the stored exception. NoValuePolicy::narrow_exception_check() is first invoked, then the reference to the exception is returned. As a valid default constructed exception is always present, no undefined behaviour occurs unless NoValuePolicy::narrow_exception_check() does that.
Note that if exception_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_exception_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`const exception_type &amp;&amp;assume_exception() const &amp;&amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_exception_rvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_exception_rvalue_const/</guid>
      <description>Narrow contract const rvalue reference observer of the stored exception. NoValuePolicy::narrow_exception_check() is first invoked, then the reference to the exception is returned. As a valid default constructed exception is always present, no undefined behaviour occurs unless NoValuePolicy::narrow_exception_check() does that.
Note that if exception_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_exception_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`exception_type &amp;&amp;assume_exception() &amp;&amp; noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_exception_rvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/assume_exception_rvalue/</guid>
      <description>Narrow contract rvalue reference observer of the stored exception. NoValuePolicy::narrow_exception_check() is first invoked, then the reference to the exception is returned. As a valid default constructed exception is always present, no undefined behaviour occurs unless NoValuePolicy::narrow_exception_check() does that.
Note that if exception_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::narrow_exception_check().
Guarantees: An exception is never thrown.</description>
    </item>
    
    <item>
      <title>`exception_type &amp;exception() &amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/exception_lvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/exception_lvalue/</guid>
      <description>Wide contract lvalue reference observer of the stored exception. NoValuePolicy::wide_exception_check() is first invoked, then the reference to the exception is returned. As a valid default constructed exception is always present, no undefined behaviour occurs if NoValuePolicy::wide_exception_check() returns.
Note that if exception_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_exception_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`const exception_type &amp;exception() const &amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/exception_lvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/exception_lvalue_const/</guid>
      <description>Wide contract const lvalue reference observer of the stored exception. NoValuePolicy::wide_exception_check() is first invoked, then the reference to the exception is returned. As a valid default constructed exception is always present, no undefined behaviour occurs if NoValuePolicy::wide_exception_check() returns.
Note that if exception_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_exception_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`exception_type &amp;&amp;exception() &amp;&amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/exception_rvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/exception_rvalue/</guid>
      <description>Wide contract rvalue reference observer of the stored exception. NoValuePolicy::wide_exception_check() is first invoked, then the reference to the exception is returned. As a valid default constructed exception is always present, no undefined behaviour occurs if NoValuePolicy::wide_exception_check() returns.
Note that if exception_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_exception_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`const exception_type &amp;&amp;exception() const &amp;&amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/exception_rvalue_const/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/exception_rvalue_const/</guid>
      <description>Wide contract const rvalue reference observer of the stored exception. NoValuePolicy::wide_exception_check() is first invoked, then the reference to the exception is returned. As a valid default constructed exception is always present, no undefined behaviour occurs if NoValuePolicy::wide_exception_check() returns.
Note that if exception_type is void, only a const overload returning void is present.
Requires: Always available.
Complexity: Depends on NoValuePolicy::wide_exception_check().
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`exception_type failure() const noexcept`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/failure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/failure/</guid>
      <description>Synthesising observer of the stored exception or error. If an exception is available, returns a copy of that directly. If an error is available, and not an exception, an ADL discovered free function auto basic_outcome_failure_exception_from_error(const EC &amp;amp;) is invoked. Default overloads for this function are defined in Outcome for  std::error_code and boost::system::error_code, these return std::make_exception_ptr(std::system_error(ec)) and boost::copy_exception(boost::system::system_error(ec)) respectively.
Requires: Both the traits is_error_code_available&amp;lt;T&amp;gt; and is_exception_ptr_available&amp;lt;T&amp;gt; are true.
Complexity: Depends on basic_outcome_failure_exception_from_error(const EC &amp;amp;).</description>
    </item>
    
    <item>
      <title>`bool operator==(const basic_result&lt;A, B, C&gt; &amp;) const`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/equality_basic_result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/equality_basic_result/</guid>
      <description>Returns true if this outcome compares equal to the other result. Comparison is done using operator== on value_type or error_type if the currently chosen state is the same for both outcome and result, otherwise false is returned. Note that if the outcome is excepted, it will never compare equal to a result.
Requires: operator== must be a valid expression between value_type and A, and between error_type and B. If value_type is void, then so must be A; similarly for error_type and B.</description>
    </item>
    
    <item>
      <title>`bool operator==(const basic_outcome&lt;A, B, C, D&gt; &amp;) const`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/equality_basic_outcome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/equality_basic_outcome/</guid>
      <description>Returns true if this outcome compares equal to the other outcome. Comparison is done using operator== on value_type or error_type and/or exception_type if the currently chosen state is the same for both outcomes, otherwise false is returned.
Requires: operator== must be a valid expression between value_type and A, and between error_type and B, and between exception_type and C. If value_type is void, then so must be A; similarly for error_type and B; similarly for exception_type and C.</description>
    </item>
    
    <item>
      <title>`bool operator==(const success_type&lt;A&gt; &amp;) const`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/inequality_success_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/inequality_success_type/</guid>
      <description>Returns true if this result is successful and its value compares equal to the value in the success type sugar. Comparison is done using operator== on value_type and A. If A is void, this call aliases bool has_value() const noexcept.
Requires: operator== must be a valid expression between value_type and A, or A is void. If value_type is void, then so must be A.
Complexity: Whatever the underlying operator== has. Constexpr and noexcept of underlying operations is propagated.</description>
    </item>
    
    <item>
      <title>`bool operator==(const failure_type&lt;A, B&gt; &amp;) const`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/equality_failure_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/equality_failure_type/</guid>
      <description>Returns true if this outcome is unsuccessful and its error compares equal to the error in the failure type sugar. Comparison is done using operator== on error_type and A and on exception_type and B.
Requires: operator== must be a valid expression between error_type and A, or A is void; operator== must be a valid expression between exception_type and B, or B is void. If error_type is void, then so must be A; if exception_type is void, then so must be B.</description>
    </item>
    
    <item>
      <title>`bool operator!=(const basic_result&lt;A, B, C&gt; &amp;) const`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/inequality_basic_result/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/inequality_basic_result/</guid>
      <description>Returns true if this outcome does not compare equal to the other result. Comparison is done using operator!= on value_type or error_type if the currently chosen state is the same for both outcome and result, otherwise true is returned. Note that an excepted outcome is always unequal to a result.
Requires: operator!= must be a valid expression between value_type and A, and between error_type and B. If value_type is void, then so must be A; similarly for error_type and B.</description>
    </item>
    
    <item>
      <title>`bool operator!=(const basic_outcome&lt;A, B, C, D&gt; &amp;) const`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/inequality_basic_outcome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/inequality_basic_outcome/</guid>
      <description>Returns true if this outcome does not compare equal to the other outcome. Comparison is done using operator!= on value_type, error_type and/or exception_type if the currently chosen state is the same for both outcomes, otherwise true is returned.
Requires: operator!= must be a valid expression between value_type and A, and between error_type and B, and between exception_type and C. If value_type is void, then so must be A; similarly for error_type and B; similarly for exception_type and C.</description>
    </item>
    
    <item>
      <title>`bool operator!=(const success_type&lt;A&gt; &amp;) const`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/equality_success_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/equality_success_type/</guid>
      <description>Returns true if this outcome is not successful or its value does not compares equal to the value in the success type sugar. Comparison is done using operator!= on value_type and A. If A is void, this call aliases bool has_error() const noexcept.
Requires: operator!= must be a valid expression between value_type and A, or A is void. If value_type is void, then so must be A.
Complexity: Whatever the underlying operator!</description>
    </item>
    
    <item>
      <title>`bool operator!=(const failure_type&lt;A, B&gt; &amp;) const`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/inequality_failure_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/inequality_failure_type/</guid>
      <description>Returns true if this outcome is successful or its error or exception does not compare equal to the error in the failure type sugar. Comparison is done using operator!= on error_type and A and on exception_type and B.
Requires: operator!= must be a valid expression between error_type and A, or A is void; operator!= must be a valid expression between exception_type and B, or B is void. If error_type is void, then so must be A; if exception_type is void, then so must be B.</description>
    </item>
    
    <item>
      <title>`void swap(basic_outcome &amp;)`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/swap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/swap/</guid>
      <description>Swap one basic_outcome with another.
Requires: Always available.
Complexity: Same as for the swap() implementations of the value_type, error_type and exception_type. The noexcept of underlying operations is propagated.
Guarantees: If an exception is thrown during the operation, the state of all three operands on entry is guaranteed restored, if at least two of the underlying operations is marked noexcept. If one or zero is marked noexcept, an attempt is made to undo the partially completed operation.</description>
    </item>
    
    <item>
      <title>`failure_type&lt;error_type, exception_type&gt; as_failure() const &amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/as_failure_lvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/as_failure_lvalue/</guid>
      <description>Return the output from free function auto failure(T &amp;amp;&amp;amp;, ...) containing a copy of any errored and/or excepted state. The error and/or exception state is accessed using const error_type &amp;amp;assume_error() const &amp;amp; noexcept and const exception_type &amp;amp;assume_exception() const &amp;amp; noexcept.
Requires: Always available.
Complexity: Whatever that of error_type&amp;rsquo;s and/or exception_type&amp;rsquo;s copy constructor is.
Guarantees: None.</description>
    </item>
    
    <item>
      <title>`failure_type&lt;error_type, exception_type&gt; as_failure() &amp;&amp;`</title>
      <link>https://ned14.github.io/outcome/reference/types/basic_outcome/as_failure_rvalue/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/reference/types/basic_outcome/as_failure_rvalue/</guid>
      <description>Return the output from free function auto failure(T &amp;amp;&amp;amp;, ...) containing a move from any errored and/or excepted state, thus leaving the outcome&amp;rsquo;s error and exception values in a moved-from state. Depending on the choice of error_type and/or exception_type, this function may therefore be destructive. The error and exception states are accessed using error_type &amp;amp;&amp;amp;assume_error() &amp;amp;&amp;amp; noexcept and exception_type &amp;amp;&amp;amp;assume_exception() &amp;amp;&amp;amp; noexcept.
Requires: Always available.
Complexity: Whatever that of error_type&amp;rsquo;s and/or exception_type&amp;rsquo;s move constructor is.</description>
    </item>
    
  </channel>
</rss>