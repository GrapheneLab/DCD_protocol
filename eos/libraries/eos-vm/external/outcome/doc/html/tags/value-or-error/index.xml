<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Value or Error on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/tags/value-or-error/</link>
    <description>Recent content in Value or Error on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ned14.github.io/outcome/tags/value-or-error/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ValueOrError Concept</title>
      <link>https://ned14.github.io/outcome/tutorial/advanced/interop/value-or-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/tutorial/advanced/interop/value-or-error/</guid>
      <description>Something not really mentioned until now is how Outcome interoperates with the proposed  P0323 std::expected&amp;lt;T, E&amp;gt;, whose design lands in between unchecked&amp;lt;T, E = varies&amp;gt; and checked&amp;lt;T, E = varies&amp;gt; (both of which are type aliases hard coding no-value policies as previously covered in this tutorial).
Expected and Outcome are isomorphic to one another in design intent, but interoperation for code using Expected and Outcome ought to be seamless thanks to the proposed ValueOrError concept framework, a subset of which Outcome implements.</description>
    </item>
    
  </channel>
</rss>