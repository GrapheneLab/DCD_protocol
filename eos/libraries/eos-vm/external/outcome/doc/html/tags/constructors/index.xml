<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Constructors on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/tags/constructors/</link>
    <description>Recent content in Constructors on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 08 Feb 2019 22:18:08 +0000</lastBuildDate>
    
	<atom:link href="https://ned14.github.io/outcome/tags/constructors/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Result returning constructors</title>
      <link>https://ned14.github.io/outcome/tutorial/advanced/constructors/</link>
      <pubDate>Fri, 08 Feb 2019 22:18:08 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/tutorial/advanced/constructors/</guid>
      <description>An oft asked question during conference talks on Expected/Outcome is how to exclusively use result to implement constructor failure. This is asked because whilst almost every member function in a class can return a result, constructors do not return values and thus cannot return a result. The implication is that one cannot avoid throwing C++ exceptions to abort a construction.
As with most things in C++, one can achieve zero-exception-throw object construction using a lot of extra typing of boilerplate, and a little bit of simple C++ metaprogramming.</description>
    </item>
    
  </channel>
</rss>