<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Outcome on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/tags/outcome/</link>
    <description>Recent content in Outcome on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 19 Mar 2019 22:57:48 +0100</lastBuildDate>
    
	<atom:link href="https://ned14.github.io/outcome/tags/outcome/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inspecting outcome&lt;T, EC, EP&gt;</title>
      <link>https://ned14.github.io/outcome/tutorial/essential/outcome/inspecting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/tutorial/essential/outcome/inspecting/</guid>
      <description>Continuing with the previous example, in Layer3 we have function z which again reports failures via exceptions. It will call function h from Layer2_old which returns outcome&amp;lt;int&amp;gt; (which may store a double or an std::error_code or an std::exception_ptr). The goal is to unpack it to either the successful return value int or to throw an appropriate exception: if we are storing an std::exception_ptr just rethrow it. If we are storing an std::error_code throw it as std::system_error, which is designed to store std::error_code&amp;rsquo;s:</description>
    </item>
    
    <item>
      <title>outcome&lt;&gt;</title>
      <link>https://ned14.github.io/outcome/tutorial/essential/outcome/</link>
      <pubDate>Tue, 19 Mar 2019 22:57:48 +0100</pubDate>
      
      <guid>https://ned14.github.io/outcome/tutorial/essential/outcome/</guid>
      <description>Type outcome&amp;lt;T, EC = varies, EP = varies, NoValuePolicy = policy::default_policy&amp;lt;T, EC, EP&amp;gt;&amp;gt; represents either a successfully computed value of type T, or one or two reasons for failure. Failure can be represented by EC, or EP, or both, although usually it will either be an EC or an EP. Similarly to result, EC defaults to std::error_code/boost::system::error_code, and EP defaults to std::exception_ptr/boost::exception_ptr.
The distinction is made into two types, EC and EP:</description>
    </item>
    
  </channel>
</rss>