<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Try on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/tags/try/</link>
    <description>Recent content in Try on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 23 Mar 2019 21:56:56 +0000</lastBuildDate>
    
	<atom:link href="https://ned14.github.io/outcome/tags/try/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inspecting result&lt;T, EC&gt;</title>
      <link>https://ned14.github.io/outcome/tutorial/essential/result/inspecting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/tutorial/essential/result/inspecting/</guid>
      <description>Suppose we will be writing a function print_half that takes a std::string representing an integer and prints half the integer:
outcome::result&amp;lt;void&amp;gt; print_half(const std::string&amp;amp; text); View this code on Github The type result&amp;lt;void&amp;gt; means that there is no value to be returned upon success, but that the operation might still fail, and we may be interested in inspecting the cause of the failure. The class template result&amp;lt;&amp;gt; is declared with the attribute [[nodiscard]], which means the compiler will warn you if you forget to inspect the returned object (in C++ 17 or later).</description>
    </item>
    
    <item>
      <title>TRY operations</title>
      <link>https://ned14.github.io/outcome/tutorial/essential/result/try/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/tutorial/essential/result/try/</guid>
      <description>In the implementation of function print_half we have seen the usage of the macro OUTCOME_TRYV(expr)/OUTCOME_TRY(expr):
OUTCOME_TRY (i, BigInt::fromString(text));  The OUTCOME_TRY macro uses C macro overloading to select between two implementations based on the number of input parameters. If there is exactly one input parameter i.e. without the i, the control statement is roughly equivalent to:
auto&amp;amp;&amp;amp; __result = BigInt::fromString(text); if (!__result) return __result.as_failure();  Where __result is a compile time generated unique name.</description>
    </item>
    
    <item>
      <title>result&lt;&gt;</title>
      <link>https://ned14.github.io/outcome/tutorial/essential/result/</link>
      <pubDate>Sat, 23 Mar 2019 21:56:56 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/tutorial/essential/result/</guid>
      <description>We will define a function that converts a std::string to an int. This function can fail for a number of reasons; if it does we want to communicate the failure reason.
outcome::result&amp;lt;int&amp;gt; convert(const std::string&amp;amp; str) noexcept; View this code on Github Template alias result&amp;lt;T, E = varies, NoValuePolicy = policy::default_policy&amp;lt;T, E, void&amp;gt;&amp;gt; has three template parameters, but the last two have default values. The first (T) represents the type of the object returned from the function upon success.</description>
    </item>
    
  </channel>
</rss>