<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Networking Ts on Outcome documentation</title>
    <link>https://ned14.github.io/outcome/tags/networking-ts/</link>
    <description>Recent content in Networking Ts on Outcome documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ned14.github.io/outcome/tags/networking-ts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASIO/Networking TS</title>
      <link>https://ned14.github.io/outcome/recipes/asio-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ned14.github.io/outcome/recipes/asio-integration/</guid>
      <description>Thanks to Christos Stratopoulos for this Outcome recipe.
Use case Boost.ASIO and standalone ASIO provide the async_result customisation point for adapting arbitrary third party libraries, such as Outcome, into ASIO.
Historically in ASIO you need to pass completion handler instances to the ASIO asynchronous i/o initiation functions. These get executed when the i/o completes.
// Dynamically allocate a buffer to read into. This must be move-only  // so it can be attached to the completion handler, hence the unique_ptr.</description>
    </item>
    
  </channel>
</rss>